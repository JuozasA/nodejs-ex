#!/bin/bash

if [ "$(ls /tmp/artifacts/ 2>/dev/null)" ]; then
    echo "---> Restoring previous build artifacts ..."
    mv -T --verbose /tmp/artifacts/node_modules "${HOME}/node_modules"
fi

echo "---> Installing application source..."
cp -Rfp /tmp/src/. ./

if [ ! -z $HTTP_PROXY ]; then
	echo "---> Setting npm http proxy to $HTTP_PROXY"
	npm config set proxy $HTTP_PROXY
fi

if [ ! -z $http_proxy ]; then
	echo "---> Setting npm http proxy to $http_proxy"
	npm config set proxy $http_proxy
fi

if [ ! -z $HTTPS_PROXY ]; then
	echo "---> Setting npm https proxy to $HTTPS_PROXY"
	npm config set https-proxy $HTTPS_PROXY
fi

if [ ! -z $https_proxy ]; then
	echo "---> Setting npm https proxy to $https_proxy"
	npm config set https-proxy $https_proxy
fi

# Change the npm registry mirror if provided
if [ ! -z "$NPM_MIRROR" ]; then
	echo "---> Setting the npm package mirror to $NPM_MIRROR"
	npm config set registry $NPM_MIRROR
fi

echo "---> Building your Node application from source..."
echo -e "Current git config"
git config --list

if [ ! -z "$YARN_ENABLED" ]; then
	echo "---> Using 'yarn install' with YARN_ARGS"
	npx yarn install $YARN_ARGS
else
	echo "---> Installing dependencies..."
	HAS_BUILD=$(node -e "console.log(require('./package.json').scripts.build ? true : false)")

	# check to see if there is a build script by inspecting the package.json
	if [ "$HAS_BUILD" == true ]; then
		npm install
		#do not fail when there is no build script
		echo "---> Building..."
		npm run build --if-present
	else
		npm install
	fi

	echo "---> Pruning dependencies..."
	npm prune
fi

echo "---> Cleaning up npm cache..."
rm -rf .npm

echo "---> Fix permissions on app-root..."
fix-permissions /opt/app-root
